# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true 
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv
        python -m pipenv install --dev
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        python -m pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pipenv run pytest . --cov=pepino --cov-report=xml --doctest-modules --junitxml=pytest.xml
    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results
        path: pytest.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Upload code coverage 
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        fail_ci_if_error: true
      if: ${{ always() }}
  publish-test-results:
      name: "Publish Test Results"
      needs: build
      runs-on: ubuntu-latest
      if: success() || failure()
      steps:
        - name: Download Artifacts
          uses: actions/download-artifact@v2
          with:
            path: artifacts

        - name: Publish Unit Test Results
          uses: EnricoMi/publish-unit-test-result-action@v1
          with:
            files: artifacts/**/pytest.xml
